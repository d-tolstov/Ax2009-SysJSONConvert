Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: SysJSONConvert выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysJSONConvert
    PROPERTIES
      Name                #SysJSONConvert
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #/// <summary>
        #/// https://www.json.org/json-en.html
        #/// Сериализует простые типы и классы в строку формата JSON
        #///
        #/// Сериализация аксаптовских объектов :
        #///     return SysJSONConvert::construct().SerializeObject( object);
        #///
        #/// Чтобы добавить произвольному классу возможность сериализоваться - нужно в нём создать функцию json()
        #///
        #/// Пример реализации функции json() :
        #///     Если на выходе хотим получить collection of name/value pairs :
        #///         str json()
        #///         {
        #///             return SysJSONConvert::construct()
        #///                 .WithKeyValue( "field1", fieldValue1)
        #///                 .WithKeyValue( "field2", fieldValue2)
        #///                 .json()
        #///             ;
        #///         }
        #///     Если класс по сути является массивом и на выходе хотим получить ordered list of values :
        #///         str json()
        #///         {
        #///             return SysJSONConvert::construct()
        #///                 .SerializeObject( valueSet)
        #///             ;
        #///         }
        #///
        #/// В произвольном классе также можно создать функцию struct, которая будет возвращать объект в виде одной из структур, понятных классу SysJSONConvert.
        #/// В этом случае функция json не нужна.
        #///     в примере ниже мы возвращаем объект класса Set :
        #///         anytype struct()
        #///         {
        #///             return valueSet;
        #///         }
        #///
        #/// В классах, реализующих интерфейсы ниже, не нужно создавать какие-либо функции :
        #///     Enumerator
        #///     Enumerable
        #///
        #/// </summary>
        #class SysJSONConvert
        #{
        #    str     json;
        #}
      ENDSOURCE
      SOURCE #DeserializeCLRObject
        #System.Object DeserializeCLRObject(
        #    str         _json
        #  , System.Type _type
        #)
        #{
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    return Newtonsoft.Json.JsonConvert::DeserializeObject( _json, _type);
        #}
      ENDSOURCE
      SOURCE #json
        #str json()
        #{
        #    return json;
        #}
      ENDSOURCE
      SOURCE #SerializeArray
        #/// <summary>
        #/// Сериализует Array в структуру вида "массив"
        #/// </summary>
        #protected str SerializeArray( Array _array)
        #{
        #    str             ret;
        #
        #    int             i;
        #;
        #    for ( i=1; i<=_array.lastIndex(); i++)
        #    {
        #        ret += (ret ? "," : "")
        #             + this.SerializeObject( _array.value(i));
        #    }
        #
        #    return strfmt("[%1]", ret);
        #}
      ENDSOURCE
      SOURCE #SerializeClass
        #/// <summary>
        #/// Сериализует классы
        #/// </summary>
        #protected str SerializeClass( anytype _object)
        #{
        #    #define.MethodJSON("json")
        #    #define.MethodStruct("struct")
        #
        #    Set             set;
        #    List            list;
        #    SysDictClass    sysDictClass;
        #
        #    str             ret;
        #;
        #    if ( !_object)
        #        ret = "null";
        #    else
        #    switch (classidget(_object))
        #    {
        #        case classnum(Array):
        #            ret     = this.SerializeArray(_object);
        #            break;
        #        case classnum(Set):
        #            set     = _object;
        #            ret     = this.SerializeObject( set.getEnumerator());
        #            break;
        #        case classnum(Map):
        #            ret     = this.SerializeMap(_object);
        #            break;
        #        case classnum(List):
        #            list    = _object;
        #            ret     = this.SerializeObject( list.getEnumerator());
        #            break;
        #        case classnum(Struct):
        #            ret     = this.SerializeStruct(_object);
        #            break;
        #        case classnum(CLRObject):
        #            ret     = this.SerializeCLRObject( _object);
        #            break;
        #        default:
        #            sysDictClass    = new SysDictClass( classidget(_object));
        #            if ( sysDictClass.hasObjectMethod(#MethodJSON))
        #            {
        #                ret = sysDictClass.callObject( #MethodJSON, _object);
        #            }
        #            else
        #            if ( sysDictClass.hasObjectMethod(#MethodStruct))
        #            {
        #                ret = this.SerializeClass( sysDictClass.callObject( #MethodStruct, _object));
        #            }
        #            else
        #            if ( sysDictClass.isImplementing(classnum(Enumerator)))
        #            {
        #                ret = this.SerializeEnumeratorAsArray( _object);
        #            }
        #            else
        #            if ( sysDictClass.isImplementing(classnum(Enumerable)))
        #            {
        #                ret = this.SerializeEnumerable( _object);
        #            }
        #            else
        #                throw Error(strfmt("Класс %1 не содержит функцию %2. Обратитесь к разработчикам!", sysDictClass.name(), #MethodJSON));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #SerializeCLRObject
        #protected str SerializeCLRObject( System.Object _object)
        #{
        #    str ret;
        #;
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = Newtonsoft.Json.JsonConvert::SerializeObject( _object);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #SerializeContainer
        #/// <summary>
        #/// Сериализует Container в структуру вида "массив"
        #/// </summary>
        #protected str SerializeContainer( Container _container)
        #{
        #    str             ret;
        #
        #    int             i;
        #;
        #    for ( i=1; i<=conlen(_container); i++)
        #    {
        #        ret += (ret ? "," : "")
        #             + this.SerializeObject( conpeek(_container,i));
        #    }
        #
        #    return strfmt("[%1]", ret);
        #}
      ENDSOURCE
      SOURCE #SerializeDate
        #protected str SerializeDate( date _value)
        #{
        #    return this.SerializeString( date2str( _value, 321, 2, 3, 2, 3, 4));
        #}
      ENDSOURCE
      SOURCE #SerializeEnumerable
        #/// <summary>
        #/// Сериализует Enumerable в структуру вида "массив"
        #/// </summary>
        #protected str SerializeEnumerable( Enumerable _enumerable)
        #{
        #    Enumerator      enumerator;
        #;
        #    enumerator  = _enumerable.getEnumerator();
        #
        #    return this.SerializeEnumeratorAsArray( enumerator);
        #}
      ENDSOURCE
      SOURCE #SerializeEnumeratorAsArray
        #/// <summary>
        #/// Сериализует Enumerator в структуру вида "массив"
        #/// </summary>
        #protected str SerializeEnumeratorAsArray( Enumerator _enumerator)
        #{
        #    str             ret;
        #;
        #    while (_enumerator.moveNext())
        #    {
        #        ret += (ret ? "," : "")
        #             + this.SerializeObject( _enumerator.current());
        #    }
        #
        #    return strfmt("[%1]", ret);
        #}
      ENDSOURCE
      SOURCE #SerializeGuid
        #protected str SerializeGuid( guid _value)
        #{
        #    return this.SerializeString( strrem(guid2str(_value),"{}"));
        #}
      ENDSOURCE
      SOURCE #SerializeKeyValuePair
        #protected str SerializeKeyValuePair(
        #    str     _key
        #  , anytype _value
        #)
        #{
        #    // Каждый элемент хранится в формате "elementName: elementValue"
        #    return strfmt( "\"%1\":%2", _key, this.SerializeObject( _value));
        #}
      ENDSOURCE
      SOURCE #SerializeMap
        #/// <summary>
        #/// Сериализует Map в структуру вида "коллекция пар key/value"
        #/// </summary>
        #protected str SerializeMap( Map _map)
        #{
        #    MapEnumerator   me;
        #    str             ret;
        #;
        #    if (_map.keyType() != Types::String)
        #        throw Error( strfmt("Объект типа Map можно сериализовать в JSON только если key имеет тип String. А встретился тип %1. Обратитесь к разработчикам!"
        #                   , _map.keyType()
        #                   ));
        #
        #    me  = _map.getEnumerator();
        #    while (me.moveNext())
        #    {
        #        ret += (ret ? "," : "")
        #             + this.SerializeKeyValuePair( me.currentKey(), me.currentValue());
        #    }
        #
        #    return strfmt("{%1}", ret);
        #}
      ENDSOURCE
      SOURCE #SerializeObject
        #/// <summary>
        #/// Сериализует простые типы и классы, содержащие метод json()
        #/// </summary>
        #public str SerializeObject( anytype _object)
        #{
        #    Types           objectType = typeof(_object);
        #    str             ret;
        #
        #    Set             permSet = new Set(Types::Class);
        #;
        #    permSet.add( new InteropPermission(InteropKind::ClrInterop));
        #    permSet.add( new ExecutePermission());
        #
        #    CodeAccessPermission::assertMultiple( permSet);
        #
        #    switch ( objectType)
        #    {
        #        case Types::String:
        #            ret = this.SerializeString( _object);
        #            break;
        #        case Types::Int64:
        #            ret = int642str(_object);
        #            break;
        #        case Types::Integer:
        #            ret = int2str(_object);
        #            break;
        #        case Types::Enum:
        #            ret = int2str(_object);
        #            break;
        #        case Types::Guid:
        #            ret = this.SerializeGuid( _object);
        #            break;
        #        case Types::Date:
        #            ret = this.SerializeDate( _object);
        #            break;
        #        case Types::UtcDateTime:
        #            ret = this.SerializeUtcDateTime( _object);
        #            break;
        #        case Types::Real:
        #            ret = this.SerializeReal( _object);
        #            break;
        #        case Types::Container:
        #            ret = this.SerializeContainer( _object);
        #            break;
        #        case Types::Class:
        #            ret = this.SerializeClass( _object);
        #            break;
        #        default:
        #            throw Error(strfmt("Тип %1 не обработан в функции %2. Обратитесь к разработчикам!", enum2str(objectType), funcname()));
        #    }
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #SerializeReal
        #protected str SerializeReal( real _value)
        #{
        #    return num2expstr( _value, 1);
        #}
      ENDSOURCE
      SOURCE #serializeString
        #protected str SerializeString( str _value)
        #{
        #;
        #    _value  = StrReplace( _value, "\\", "\\\\");
        #    _value  = StrReplace( _value, '"', '\\\"');
        #    return strfmt( "\"%1\"", _value);
        #}
      ENDSOURCE
      SOURCE #SerializeStruct
        #/// <summary>
        #/// Сериализует Struct в структуру вида "коллекция пар key/value"
        #/// </summary>
        #protected str SerializeStruct( Struct _struct)
        #{
        #    str             ret;
        #
        #    int             i;
        #    str             fieldName;
        #;
        #    for ( i=1; i<=_struct.fields(); i++)
        #    {
        #        fieldName   = _struct.fieldName(i);
        #        if (!fieldName)
        #            continue;
        #
        #        ret += (ret ? "," : "")
        #             + this.SerializeKeyValuePair( fieldName, _struct.valueIndex(i));
        #    }
        #
        #    return strfmt("{%1}", ret);
        #}
      ENDSOURCE
      SOURCE #SerializeUtcDateTime
        #protected str SerializeUtcDateTime( utcdatetime _value)
        #{
        #    return this.SerializeString( DateTimeUtil::toStr( _value));
        #}
      ENDSOURCE
      SOURCE #WithKeyValue
        #SysJSONConvert WithKeyValue(
        #    str     _key
        #  , anytype _value
        #)
        #{
        #;
        #    // Элементы в JSON разделены запятой
        #    if ( json)
        #        json    += ",";
        #
        #    // Каждый элемент хранится в формате "elementName: elementValue"
        #    json    += this.SerializeKeyValuePair( _key, _value);
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #construct
        #/// <summary>
        #///
        #/// </summary>
        #/// <returns>
        #///
        #/// </returns>
        #/// <remarks>
        #///
        #/// </remarks>
        #static SysJSONConvert construct()
        #{
        #    return new SysJSONConvert();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysJSONConvertTest выгружен
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysJSONConvertTest
    PROPERTIES
      Name                #SysJSONConvertTest
      Extends             #SysTestCase
      RunOn               #Server
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #class SysJSONConvertTest extends SysTestCase
        #{
        #    SysJSONConvert  convertor;
        #
        #    str             stringNull;
        #    #define.JSONStringNull("\"\"")
        #    date            dateNull;
        #    #define.JSONDateNull("\"\"")
        #    real            realNull;
        #    #define.JSONRealNull("0")
        #    int             intNull;
        #    #define.JSONIntNull("0")
        #    int64           int64Null;
        #    #define.JSONInt64Null("0")
        #    guid            guidNull;
        #    #define.JSONGuidNull("\"00000000-0000-0000-0000-000000000000\"")
        #
        #    str             json;
        #}
      ENDSOURCE
      SOURCE #construct
        #protected SysJSONConvert construct()
        #{
        #;
        #    convertor   = SysJSONConvert::construct();
        #    return convertor;
        #}
      ENDSOURCE
      SOURCE #testConstruct
        #void testConstruct()
        #{
        #;
        #    this.construct();
        #
        #    this.assertNotNull( convertor);
        #}
      ENDSOURCE
      SOURCE #testConvertArray
        #void testConvertArray()
        #{
        #    Array   array;
        #;
        #    array = new Array(Types::Integer);
        #    array.value( 1, 10);
        #    array.value( 2, 20);
        #
        #    this.assertEquals(
        #        "[10,20]"
        #      , this.construct().SerializeObject(array)
        #    );
        #}
      ENDSOURCE
      SOURCE #testConvertContainer
        #void testConvertContainer()
        #{
        #    container   con;
        #;
        #    con = [ 10, 20];
        #
        #    this.assertEquals(
        #        "[10,20]"
        #      , this.construct().SerializeObject(con)
        #    );
        #
        #    con = [ 10, 20, [30,40]];
        #
        #    this.assertEquals(
        #        "[10,20,[30,40]]"
        #      , this.construct().SerializeObject(con)
        #    );
        #}
      ENDSOURCE
      SOURCE #testConvertDateNull
        #void testConvertDateNull()
        #{
        #;
        #    json    = SysJSONConvert::construct().SerializeObject( dateNull);
        #
        #    this.assertEquals( #JSONDateNull, json);
        #}
      ENDSOURCE
      SOURCE #testConvertGuidNull
        #void testConvertGuidNull()
        #{
        #;
        #    json    = SysJSONConvert::construct().SerializeObject( guidNull);
        #
        #    this.assertEquals( #JSONGuidNull, json);
        #}
      ENDSOURCE
      SOURCE #testConvertInt64Null
        #void testConvertInt64Null()
        #{
        #;
        #    json    = SysJSONConvert::construct().SerializeObject( int64Null);
        #
        #    this.assertEquals( #JSONInt64Null, json);
        #}
      ENDSOURCE
      SOURCE #testConvertIntNull
        #void testConvertIntNull()
        #{
        #;
        #    json    = SysJSONConvert::construct().SerializeObject( intNull);
        #
        #    this.assertEquals( #JSONIntNull, json);
        #}
      ENDSOURCE
      SOURCE #testConvertRealNull
        #void testConvertRealNull()
        #{
        #;
        #    json    = SysJSONConvert::construct().SerializeObject( realNull);
        #
        #    this.assertEquals( #JSONRealNull, json);
        #}
      ENDSOURCE
      SOURCE #testConvertStringNull
        #void testConvertStringNull()
        #{
        #;
        #    json    = SysJSONConvert::construct().SerializeObject( stringNull);
        #
        #    this.assertEquals( #JSONStringNull, json);
        #}
      ENDSOURCE
      SOURCE #testConvertStruct
        #void testConvertStruct()
        #{
        #    Struct  s = new Struct();
        #;
        #    s.add( "f1", 10);
        #    s.add( "f2", 20);
        #
        #    this.assertEquals(
        #        "{\"f1\":10,\"f2\":20}"
        #      , this.construct().SerializeObject( s)
        #    );
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : SysJSON unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #SysJSON
   SHARED
  PROPERTIES
    Name                #SysJSON
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41875
        NODETYPE 329
        NAME #SysJSONConvert
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 41877
        NODETYPE 329
        NAME #SysJSONConvertTest
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
